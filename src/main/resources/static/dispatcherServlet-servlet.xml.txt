<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
    
    <!-- Controller的组建扫描 -->
    <!-- 支持@Autowired,@Resource,@Required,@Component,@Repository,@Service,@Controller等注解 -->
    <!-- 注册扫描到的Bean -->
    <context:component-scan base-package="xyz.fortern.controller"/>
    
    <!-- 配置视图解析器，对于视图，自动加上以下前缀和后缀 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    
    <!-- 声明自定义转换器 -->
    <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <list>
                <bean class="xyz.fortern.converter.StringToDateConverter"/>
            </list>
        </property>
    </bean>
    
    <!-- 开启MVC注解驱动 -->
    <!-- 注册RequestMappingHandlerMapping和RequestMappingHandlerAdapter以及其他的一些Bean实例 -->
    <!-- 配置一些MessageConverter，即解决了@Controller注解的使用前提配置 -->
    <!-- 实现类 org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser -->
    <!-- 会自动为我们将扫描到的@Component，@Controller，@Service，@Repository等注解标记的组件注册到工厂中，来处理我们的请求。 -->
    <!-- conversion-service用来指定声明的转换器 -->
    <mvc:annotation-driven conversion-service="conversionService">
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter"/>
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <!-- 没有这些配置返回json的ContentType会出现问题 -->
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html;charset=utf-8</value>
                        <value>application/json;charset=utf-8</value>
                    </list>
                </property>
                <property name="fastJsonConfig">
                    <bean class="com.alibaba.fastjson.support.config.FastJsonConfig">
                        <property name="SerializerFeatures">
                            <list>
                                <value>DisableCircularReferenceDetect</value>
                            </list>
                        </property>
                    </bean>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    
    <!-- 将一些路径视为资源路径，开放访问 -->
    <!--
    <mvc:resources mapping="/js/*" location="/js/"/>
    <mvc:resources mapping="/image/*" location="/image/"/>
    -->
    <!-- 开启默认的Servlet也可以处理静态资源 -->
    <mvc:default-servlet-handler/>
    
    <!-- 配置拦截器 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/user/**"/>
            <bean class="xyz.fortern.interceptor.MyInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>
    
    <!--<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        &lt;!&ndash; 默认的错误处理 &ndash;&gt;
        <property name="defaultErrorView" value="error"/>
        &lt;!&ndash; 特定异常的处理 &ndash;&gt;
        <property name="exceptionMappings">
            <map>
                <entry key="java.lang.ClassCastException" value="error1"/>
                <entry key="java.lang.NumberFormatException" value="error2"/>
            </map>
        </property>
    </bean>-->
    
    <bean class="xyz.mojo.resolver.MyExceptionResolver"/>

</beans>